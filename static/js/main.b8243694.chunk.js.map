{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","name","contacts","onChange","value","selected","map","contact","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","e","target","required","placeholder","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","tile","className","Object","values","index","TileList","tiles","AppointmentsPage","appointments","addAppointment","useState","length","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","pattern","ContactsPage","addContact","dupName","setDupName","useEffect","undefined","find","App","setContacts","setAppointments","ROUTES","to","activeClassName","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8243694.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({ name, contacts, onChange }) => {\r\n  return (\r\n    <select name={name} onChange={onChange} >\r\n      <option\r\n        value={''}\r\n        key={-1}\r\n        selected='selected' >\r\n      No Contact Selected\r\n      </option>\r\n      {contacts.map((contact) => {\r\n        return (\r\n          <option\r\n            value={contact}\r\n            key={contact} >\r\n          {contact}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ContactPicker } from '../contactPicker/ContactPicker';\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const getContactNames = () => {\r\n    return contacts.map((contact) => contact.name)\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input\r\n          type='text'\r\n          name='title'\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n          placeholder='Appointment' />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <ContactPicker\r\n          name='contact'\r\n          value={contact}\r\n          contacts={getContactNames()}\r\n          onChange={(e) => setContact(e.target.value)}\r\n          placeholder='Appointment With' />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type='date'\r\n          name='date'\r\n          min={getTodayString()}\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          required />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type='time'\r\n          name='time'\r\n          value={time}\r\n          onChange={(e) => setTime(e.target.value)}\r\n          required />\r\n      </label>\r\n      <br />\r\n      <input\r\n        type='submit'\r\n        value='Add Appointment' />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({ tile }) => {\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {Object.values(tile).map((value, index) => (\r\n        <p key={index} className={`${index === 0 ? 'tile-title' : ''} tile`}>\r\n          {value}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Tile } from '../tile/Tile';\r\n\r\nexport const TileList = ({ tiles }) => {\r\n  return (\r\n    <div>\r\n      {tiles.map((tile, index) => (\r\n        <Tile key={index} tile={tile} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AppointmentForm } from '../../components/appointmentForm/AppointmentForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const AppointmentsPage = ({\r\n  appointments,\r\n  addAppointment,\r\n  contacts\r\n}) => {\r\n  /*\r\n  Define state variables for\r\n  appointment info\r\n  */\r\n  const [title, setTitle] = useState('');\r\n  const [contact, setContact] = useState(\r\n    contacts.length > 0 ? contacts[0].name : ''\r\n  );\r\n  const [date, setDate] = useState('');\r\n  const [time, setTime] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    */\r\n    addAppointment(title, contact, date, time);\r\n    setTitle('');\r\n    setContact('');\r\n    setDate('');\r\n    setTime('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          contacts={contacts}\r\n          title={title}\r\n          setTitle={setTitle}\r\n          contact={contact}\r\n          setContact={setContact}\r\n          date={date}\r\n          setDate={setDate}\r\n          time={time}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit} />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList tiles={appointments} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input\r\n          type='text'\r\n          name='name'\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n          placeholder='Enter Contact Name'\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type='tel'\r\n          name='phone'\r\n          value={phone}\r\n          onChange={(e) => setPhone(e.target.value)}\r\n          required\r\n          // regex for ten digit\r\n          pattern='(\\([2-9]\\d\\d\\)|[2-9]\\d\\d) ?[-.,]? ?[2-9]\\d\\d ?[-.,]? ?\\d{4}'\r\n          placeholder='Enter Area Code + Phone'\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type='email'\r\n          name='email'\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n          // regex for email- too complex here\r\n          //pattern=\"/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\"\r\n          placeholder='Enter Email'\r\n        />\r\n      </label>\r\n      <br />\r\n      <input type='submit' value='Add Contact' />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  /*\r\n  Define state variables for\r\n  contact info and duplicate check\r\n  */\r\n\r\n//twg adding below name, phone, email\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [dupName, setDupName] = useState(false);\r\n  //const [bsName, setBsName] = useState('');\r\n  //const [bsPhone, setBsPhone] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!dupName) {\r\n      addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n    //addBs(bsName, bsPhone);\r\n    //setBsName('');\r\n    //setBsPhone('');\r\n  };\r\n\r\n  /*\r\n  Using hooks, check for contact name in the\r\n  contacts array variable in props\r\n  */\r\n\r\n  //twg set duplicate to true if name already exists in contacts\r\n    useEffect(() => {\r\n      const checkForDupName = () => {\r\n        const found = contacts.find((contact) => contact.name === name);\r\n        //if (found === true) {                     <<original\r\n        if (found !== undefined) {\r\n          return true;\r\n        }\r\n        return false\r\n      };\r\n\r\n      if (checkForDupName()) {\r\n        setDupName(true);\r\n      } else {\r\n        setDupName(false);\r\n      }\r\n    }, [name, contacts, dupName]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>\r\n          Add Contact\r\n          {dupName ? 'Name has already been entered' : ''}\r\n        </h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          //bsName={bsName}\r\n          //setBsName={setBsName}\r\n          //bsPhone={bsPhone}\r\n          //setBsPhone={setBsPhone}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n \r\n// Defining state variables for contacts and appointments\r\n//twg adding two lines here. Setting initial conditions with: '' :\r\n  //const [contacts, setContacts] = useState([{name: '', phone: '', email: ''}]);\r\n  //const [appointments, setAppointments] = useState([{title: '', contact: '', date: '', time: ''}]);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [appointments, setAppointments] = useState([]);\r\n\r\n//twg adding in deletable lines for testing\r\n/*\r\n  const [bs, setBs] = useState([]);\r\n  const addBs = (bsName, bsPhone) => {\r\n    setBs([...bs,\r\n      {\r\n        bsName: bsName,\r\n        bsPhone: bsPhone\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const bsTestName = bs.bsName;\r\n  const bsTestName1 = bs.bsPhone;\r\n*/\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n// Implementing functions to add data to contacts and appointments\r\n//twg adding lines here:\r\n  const addContact = (name, phone, email) => {\r\n    setContacts([...contacts,\r\n      {\r\n        name: name,\r\n        phone: phone,\r\n        email: email\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const addAppointment = (title, contact, date, time) => {\r\n    setAppointments([...appointments,\r\n      {\r\n        title: title,\r\n        contact: contact,\r\n        date: date,\r\n        time: time\r\n      }\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n             {/* Add props to ContactsPage */}\r\n            <ContactsPage\r\n                  contacts={contacts}\r\n                  addContact={addContact} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            {/* Add props to AppointmentsPage */}\r\n            <AppointmentsPage\r\n                  contacts={contacts}\r\n                  appointments={appointments}\r\n                  addAppointment={addAppointment} />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}